package main

import (
	"bytes"
	"fmt"
	"golang.org/x/tools/go/packages"
	"text/template"
	"time"
)

var standardLibraryPackages = map[string]bool{}
var importTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated by friendly robots at {{ .Timestamp }}
package main

import (
{{- range .Packages}}
	_ {{ printf "%q" . }}
{{- end}}
)

func main() {
}
`))

type Manifest struct {
	PackagePaths         string
	ExcludedPathSegments []string
}

func init() {
	// Build a cache of package paths for the standard library
	packages, err := packages.Load(nil, "std")
	if err != nil {
		panic(err)
	}

	for _, p := range packages {
		standardLibraryPackages[p.PkgPath] = true
	}
}

func (m Manifest) Generate() ([]byte, error) {
	packages, err := dependenciesForPackages(m.PackagePaths, m.ExcludedPathSegments)
	if err != nil {
		return nil, err
	}

	templateConfig := struct {
		Timestamp time.Time
		Packages  []string
	}{
		Timestamp: time.Now(),
		Packages:  packages,
	}

	buf := &bytes.Buffer{}
	if err := importTemplate.Execute(buf, templateConfig); err != nil {
		return nil, fmt.Errorf("template: %s", err)
	}

	return buf.Bytes(), nil
}
